@page "/aacqcslicedataview"
@using Models
@using System
@using BlazorServer.Data
@using System.IO
@using System.Text
@using System.Net.Http
@using System.Threading
@using OfficeOpenXml
@using OfficeOpenXml.Style
@using Blazored.Toast
@using Blazored
@using Blazored.Toast.Services
@using Microsoft.AspNetCore.Http
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Mvc.Controllers
@inject IJSRuntime _iJSRuntime
@inject IHttpControllerAPI _controllerAPI
@inject IToastService _toastService
@inject IHttpContextAccessor _httpContext

<h3>QC 数据查看</h3>

<EditForm Model="searchModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="hours" @bind-Value="searchModel.Hours" />
    <text>输入时间：单位： /小时</text>
    <button type="submit">查找</button>
</EditForm>


@if (qcSlicesData != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>模具Id</th>
                <th>墙Id</th>
                <th>砖Id</th>
                <th>检测结果</th>
                <th>检测时间</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var greencake in qcSlicesData)
            {
                foreach (var slice in greencake.Slices)
                {
                    <tr>
                        <td>@greencake.GreencakeId</td>
                        <td>@slice.wallId</td>
                        <td>@slice.slicesId</td>
                        <td>@(slice.qcResult ? "合格" : "不合格")</td>
                        <td>@(greencake.AacQcTime + (DateTime.Now - DateTime.UtcNow))</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

<button class="btn btn-primary" @onclick="ExportQCListToExcel">导出为Excel</button>
@code {

    SearchModel searchModel = new SearchModel();
    private HttpContext httpContext => _httpContext.HttpContext;
    private List<AacQcCheckData> qcSlicesData = new List<AacQcCheckData>();
    private void HandleValidSubmit()
    {
        if (int.TryParse(searchModel.Hours, out int hours))
        {
            qcSlicesData = _controllerAPI.GetQCControllerData(searchModel.Hours);
            _toastService.ShowSuccess("查询成功！");
        }
        else
        {
            _toastService.ShowError("请在输入框中输入合法的时间");
        }
    }

    private void ExportQCListToExcel()
    {
        string fileName = "QCList" + DateTime.Now.ToString().Replace("/", "").Replace(" ", "").Replace(":", "") + ".xlsx";
        string path = Directory.GetCurrentDirectory();
        string savePath = path + "\\" + fileName;

        FileStream fileStream = new FileStream(savePath, FileMode.CreateNew);
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        //加载这个 Excel 文件
        ExcelPackage package = new ExcelPackage(fileStream);

        // 添加一个 sheet 表
        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("QC记录表");

        int rowIndex = 1;   // 起始行为 1
        int colIndex = 1;   // 起始列为 1
        ExcelModels excelModels = new ExcelModels();
        //设置列名
        for (int i = 0; i < 5; i++)//5列
        {
            string columeHeadName;
            excelModels.ColumeHeadName.TryGetValue(i + 1, out columeHeadName);
            worksheet.Cells[rowIndex, colIndex + i].Value = columeHeadName;

            //自动调整列宽，也可以指定最小宽度和最大宽度
            worksheet.Column(colIndex + i).AutoFit();
        }

        // 跳过第一列列名
        rowIndex++;

        int rowCount = 0;

        //写入数据
        for (int i = 0; i < qcSlicesData.Count; i++)
        {
            for (int j = 0; j < qcSlicesData[i].Slices.Count; j++)
            {
                worksheet.Cells[rowIndex + rowCount, colIndex + 0].Value = qcSlicesData[i].GreencakeId;
                worksheet.Cells[rowIndex + rowCount, colIndex + 1].Value = qcSlicesData[i].Slices[j].wallId;
                worksheet.Cells[rowIndex + rowCount, colIndex + 2].Value = qcSlicesData[i].Slices[j].slicesId;
                worksheet.Cells[rowIndex + rowCount, colIndex + 3].Value = qcSlicesData[i].Slices[j].qcResult ? "合格" : "不合格";
                worksheet.Cells[rowIndex + rowCount, colIndex + 4].Value = (qcSlicesData[i].AacQcTime + (DateTime.Now - DateTime.UtcNow)).ToString();
                rowCount++;
            }
            //自动调整行高
            worksheet.Row(rowIndex + i).CustomHeight = true;
        }

        //设置字体，也可以是中文，比如：宋体
        worksheet.Cells.Style.Font.Name = "Arial";

        //字体加粗
        worksheet.Cells.Style.Font.Bold = true;

        //字体大小
        worksheet.Cells.Style.Font.Size = 12;

        //字体颜色
        worksheet.Cells.Style.Font.Color.SetColor(System.Drawing.Color.Black);

        //单元格背景样式，要设置背景颜色必须先设置背景样式
        //worksheet.Cells.Style.Fill.PatternType = ExcelFillStyle.Solid;
        //单元格背景颜色
        //worksheet.Cells.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.DimGray);

        //设置单元格所有边框样式和颜色
        worksheet.Cells.Style.Border.BorderAround(ExcelBorderStyle.Thin, System.Drawing.ColorTranslator.FromHtml("#0097DD"));

        //单独设置单元格四边框 Top、Bottom、Left、Right 的样式和颜色
        //worksheet.Cells.Style.Border.Top.Style = ExcelBorderStyle.Thin;
        //worksheet.Cells.Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);

        //垂直居中
        worksheet.Cells.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //水平居中
        worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

        //单元格是否自动换行
        worksheet.Cells.Style.WrapText = false;

        //设置单元格格式为文本
        worksheet.Cells.Style.Numberformat.Format = "@";

        //单元格自动适应大小
        worksheet.Cells.Style.ShrinkToFit = true;

        package.Save();
        //也可以直接获取字节数组
        byte[] bytes = package.GetAsByteArray();

        fileStream.Close();
        fileStream.Dispose();

        //worksheet.Dispose();
        //package.Dispose();

        //string textStrings = package.ToString();
        //调用下面的方法输出到浏览器下载
        OutputClient(savePath, bytes);

        worksheet.Dispose();
        package.Dispose();
        _toastService.ShowSuccess("导出Excel成功!!");
    }

    public void OutputClient(string fileString, byte[] bytes)
    {
        _iJSRuntime.InvokeAsync<object>(
            "SaveAsFile",
            "AacQcRecordList.xlsx",
            Convert.ToBase64String(bytes)
            );
        //Microsoft.AspNetCore.Mvc.FileStreamResult();
        //_httpContext.HttpContext.Response.ContentType = "application/x-download";
        //_httpContext.HttpContext.Response.Headers.Add("Content-Disposition", "attachment; filename=" + System.IO.Path.GetFileName(fileString));
        //_httpContext.HttpContext.Response.Clear();
        //_httpContext.HttpContext.Response.WriteAsync(fileString);
        //_httpContext.HttpContext.Response.Body.Dispose();
        //var write = response.BodyWriter;
        //httpContext.Response.OnStarting(() =>
        //{
        //    httpContext.Response.Headers.Clear();
        //    httpContext.Response.Headers.Add("Content-Disposition", string.Format("attachment; filename={0}.xlsx", DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss")));
        //    httpContext.Response.Headers.Append("Content-Type", "text/html; charset=GB2312");
        //    return Task.FromResult(0);
        //});
        //response.StartAsync();


        //response.ClearHeaders();
        //response.ClearContent();

        //response.ContentType = "application/ms-excel";
        //response.OnStarting();
        //response.AppendHeader("Content-Type", "text/html; charset=GB2312");
        //response.AddHeader("Content-Disposition", string.Format("attachment; filename={0}.xlsx", DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss")));
        //httpContext.Response.Headers.Add("Content-Disposition", string.Format("attachment; filename={0}.xlsx", DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss")));
        //httpContext.Response.Headers.Append("Content-Type", "text/html; charset=GB2312");
        //response.Charset = "GB2312";
        //response.ContentEncoding = Encoding.GetEncoding("GB2312");
        //httpContext.Response.ContentType = "application/vnd.openxmlformats - officedocument.spreadsheetml.sheet";

        //foreach (var b in bytes)
        //{
        //    httpContext.Response.Body.WriteByte(b);
        //}
        ////AsyncCallback asyncCallback;
        ////response.Body.BeginWrite(bytes, 0, int.MaxValue); //WriteAsync(textString).GetAwaiter();
        ////response.BinaryWrite(bytes);
        //httpContext.Response.Body.Flush();

        //httpContext.Response.Body.Dispose();
    }
}
